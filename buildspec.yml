version: 0.2

env:
  variables:
    AWS_REGION: "us-east-1"
    AWS_ACCOUNT_ID: "960785399995"
    REPOSITORY_URI: "960785399995.dkr.ecr.us-east-1.amazonaws.com/hello-server"

phases:
  install:
    commands:
      # Setup an "ok" shell script we can use to check whether the build was a success
      - printf '#!/bin/bash\nif [[ "$CODEBUILD_BUILD_SUCCEEDING" == "0" ]]; then exit 1; fi' > /usr/local/bin/ok
      - chmod +x /usr/local/bin/ok

  pre_build:
    commands:
      # - echo Obtaining git branch name...
      # - BRANCH=$(git branch -a --contains $CODEBUILD_RESOLVED_SOURCE_VERSION)
      # - if [ "$BRANCH" != "test" ] && [ "$BRANCH" != "master" ]; then exit 1; fi
      # - echo Branch is $BRANCH
      # - IMAGE_TAG=$BRANCH-$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - echo Running tests...
      - ENV_NAME=test go test -v ./...
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t $REPOSITORY_URI:$IMAGE_TAG .
  post_build:
    commands:
      - ok && echo Build completed on `date`
      - echo Logging in to Amazon ECR...
      - aws --version
      - $(aws ecr get-login --region us-west-1 --no-include-email)
      - echo Pushing the Docker image...
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing ECS task definition file\(s\)...
      - |
        if [ "$ENV_NAME" == "test" ]
        then
          ENV_NAME=test envsubst < ecs-task-definition.json > ecs-task-test.json
        else
          ENV_NAME=staging envsubst < ecs-task-definition.json > ecs-task-staging.json
          ENV_NAME=production envsubst < ecs-task-definition.json > ecs-task-production.json
        fi
artifacts:
    files:
      - ecs-task-test.json
      - ecs-task-staging.json
      - ecs-task-production.json
    discard-paths: yes